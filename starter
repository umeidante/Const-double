#include <iostream>
#include <complex>
#include <vector>
#include <cmath>

typedef std::complex<double> Complex;
typedef std::vector<Complex> CArray;

const double PI = 3.141592653589793238460;

void fft(CArray& x) {
    const size_t N = x.size();
    if (N <= 1) return;

    CArray even = x[std::slice(0, N/2, 2)];
    CArray odd = x[std::slice(1, N/2, 2)];

    fft(even);
    fft(odd);

    for (size_t k = 0; k < N / 2; k++) {
        Complex t = std::polar(1.0, -2 * PI * k / N) * odd[k];
        x[k] = even[k] + t;
        x[k + N/2] = even[k] - t;
    }
}

void ifft(CArray& x) {
    x = x.apply(std::conj);
    fft(x);
    x = x.apply(std::conj);
    x /= x.size();
}

int main() {
    const Complex test[] = { 1, 1, 1, 1, 0, 0, 0, 0 };
    CArray data(test, test + sizeof(test) / sizeof(test[0]));

    fft(data);

    std::cout << "FFT:\n";
    for (int i = 0; i < data.size(); ++i)
        std::cout << data[i] << std::endl;

    ifft(data);

    std::cout << "\nInverse FFT:\n";
    for (int i = 0; i < data.size(); ++i)
        std::cout << data[i] << std::endl;

    return 0;
}
